//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SRHF.wrLAB {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsLABSoap", Namespace="http://tempuri.org/")]
    public partial class wsLAB : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetLabRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabRecordByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabRecordByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabRecordByDatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLabRecordByEMROperationCompleted;
        
        private System.Threading.SendOrPostCallback GetYearlySerialNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDailySerialNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWardAutoCompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestsAutoCompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLabRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateLabRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteLabRecordOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsLAB() {
            this.Url = global::SRHF.Properties.Settings.Default.SRHF_wrLAB_wsLAB;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetLabRecordCompletedEventHandler GetLabRecordCompleted;
        
        /// <remarks/>
        public event GetLabRecordByIDCompletedEventHandler GetLabRecordByIDCompleted;
        
        /// <remarks/>
        public event GetLabRecordByDateCompletedEventHandler GetLabRecordByDateCompleted;
        
        /// <remarks/>
        public event GetLabRecordByDatesCompletedEventHandler GetLabRecordByDatesCompleted;
        
        /// <remarks/>
        public event GetLabRecordByEMRCompletedEventHandler GetLabRecordByEMRCompleted;
        
        /// <remarks/>
        public event GetYearlySerialNoCompletedEventHandler GetYearlySerialNoCompleted;
        
        /// <remarks/>
        public event GetDailySerialNoCompletedEventHandler GetDailySerialNoCompleted;
        
        /// <remarks/>
        public event GetWardAutoCompleteCompletedEventHandler GetWardAutoCompleteCompleted;
        
        /// <remarks/>
        public event GetTestsAutoCompleteCompletedEventHandler GetTestsAutoCompleteCompleted;
        
        /// <remarks/>
        public event AddLabRecordCompletedEventHandler AddLabRecordCompleted;
        
        /// <remarks/>
        public event UpdateLabRecordCompletedEventHandler UpdateLabRecordCompleted;
        
        /// <remarks/>
        public event DeleteLabRecordCompletedEventHandler DeleteLabRecordCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLabRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetLabRecord() {
            object[] results = this.Invoke("GetLabRecord", new object[0]);
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabRecordAsync() {
            this.GetLabRecordAsync(null);
        }
        
        /// <remarks/>
        public void GetLabRecordAsync(object userState) {
            if ((this.GetLabRecordOperationCompleted == null)) {
                this.GetLabRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabRecordOperationCompleted);
            }
            this.InvokeAsync("GetLabRecord", new object[0], this.GetLabRecordOperationCompleted, userState);
        }
        
        private void OnGetLabRecordOperationCompleted(object arg) {
            if ((this.GetLabRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabRecordCompleted(this, new GetLabRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLabRecordByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LAB GetLabRecordByID(int ID) {
            object[] results = this.Invoke("GetLabRecordByID", new object[] {
                        ID});
            return ((LAB)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabRecordByIDAsync(int ID) {
            this.GetLabRecordByIDAsync(ID, null);
        }
        
        /// <remarks/>
        public void GetLabRecordByIDAsync(int ID, object userState) {
            if ((this.GetLabRecordByIDOperationCompleted == null)) {
                this.GetLabRecordByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabRecordByIDOperationCompleted);
            }
            this.InvokeAsync("GetLabRecordByID", new object[] {
                        ID}, this.GetLabRecordByIDOperationCompleted, userState);
        }
        
        private void OnGetLabRecordByIDOperationCompleted(object arg) {
            if ((this.GetLabRecordByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabRecordByIDCompleted(this, new GetLabRecordByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLabRecordByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetLabRecordByDate(System.DateTime dt) {
            object[] results = this.Invoke("GetLabRecordByDate", new object[] {
                        dt});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabRecordByDateAsync(System.DateTime dt) {
            this.GetLabRecordByDateAsync(dt, null);
        }
        
        /// <remarks/>
        public void GetLabRecordByDateAsync(System.DateTime dt, object userState) {
            if ((this.GetLabRecordByDateOperationCompleted == null)) {
                this.GetLabRecordByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabRecordByDateOperationCompleted);
            }
            this.InvokeAsync("GetLabRecordByDate", new object[] {
                        dt}, this.GetLabRecordByDateOperationCompleted, userState);
        }
        
        private void OnGetLabRecordByDateOperationCompleted(object arg) {
            if ((this.GetLabRecordByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabRecordByDateCompleted(this, new GetLabRecordByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLabRecordByDates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetLabRecordByDates(System.DateTime df, System.DateTime dt) {
            object[] results = this.Invoke("GetLabRecordByDates", new object[] {
                        df,
                        dt});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabRecordByDatesAsync(System.DateTime df, System.DateTime dt) {
            this.GetLabRecordByDatesAsync(df, dt, null);
        }
        
        /// <remarks/>
        public void GetLabRecordByDatesAsync(System.DateTime df, System.DateTime dt, object userState) {
            if ((this.GetLabRecordByDatesOperationCompleted == null)) {
                this.GetLabRecordByDatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabRecordByDatesOperationCompleted);
            }
            this.InvokeAsync("GetLabRecordByDates", new object[] {
                        df,
                        dt}, this.GetLabRecordByDatesOperationCompleted, userState);
        }
        
        private void OnGetLabRecordByDatesOperationCompleted(object arg) {
            if ((this.GetLabRecordByDatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabRecordByDatesCompleted(this, new GetLabRecordByDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLabRecordByEMR", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetLabRecordByEMR(string EMR) {
            object[] results = this.Invoke("GetLabRecordByEMR", new object[] {
                        EMR});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetLabRecordByEMRAsync(string EMR) {
            this.GetLabRecordByEMRAsync(EMR, null);
        }
        
        /// <remarks/>
        public void GetLabRecordByEMRAsync(string EMR, object userState) {
            if ((this.GetLabRecordByEMROperationCompleted == null)) {
                this.GetLabRecordByEMROperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLabRecordByEMROperationCompleted);
            }
            this.InvokeAsync("GetLabRecordByEMR", new object[] {
                        EMR}, this.GetLabRecordByEMROperationCompleted, userState);
        }
        
        private void OnGetLabRecordByEMROperationCompleted(object arg) {
            if ((this.GetLabRecordByEMRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLabRecordByEMRCompleted(this, new GetLabRecordByEMRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetYearlySerialNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetYearlySerialNo(System.DateTime dt) {
            object[] results = this.Invoke("GetYearlySerialNo", new object[] {
                        dt});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetYearlySerialNoAsync(System.DateTime dt) {
            this.GetYearlySerialNoAsync(dt, null);
        }
        
        /// <remarks/>
        public void GetYearlySerialNoAsync(System.DateTime dt, object userState) {
            if ((this.GetYearlySerialNoOperationCompleted == null)) {
                this.GetYearlySerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetYearlySerialNoOperationCompleted);
            }
            this.InvokeAsync("GetYearlySerialNo", new object[] {
                        dt}, this.GetYearlySerialNoOperationCompleted, userState);
        }
        
        private void OnGetYearlySerialNoOperationCompleted(object arg) {
            if ((this.GetYearlySerialNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetYearlySerialNoCompleted(this, new GetYearlySerialNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDailySerialNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDailySerialNo(System.DateTime dt) {
            object[] results = this.Invoke("GetDailySerialNo", new object[] {
                        dt});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDailySerialNoAsync(System.DateTime dt) {
            this.GetDailySerialNoAsync(dt, null);
        }
        
        /// <remarks/>
        public void GetDailySerialNoAsync(System.DateTime dt, object userState) {
            if ((this.GetDailySerialNoOperationCompleted == null)) {
                this.GetDailySerialNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDailySerialNoOperationCompleted);
            }
            this.InvokeAsync("GetDailySerialNo", new object[] {
                        dt}, this.GetDailySerialNoOperationCompleted, userState);
        }
        
        private void OnGetDailySerialNoOperationCompleted(object arg) {
            if ((this.GetDailySerialNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDailySerialNoCompleted(this, new GetDailySerialNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetWardAutoComplete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetWardAutoComplete() {
            object[] results = this.Invoke("GetWardAutoComplete", new object[0]);
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetWardAutoCompleteAsync() {
            this.GetWardAutoCompleteAsync(null);
        }
        
        /// <remarks/>
        public void GetWardAutoCompleteAsync(object userState) {
            if ((this.GetWardAutoCompleteOperationCompleted == null)) {
                this.GetWardAutoCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWardAutoCompleteOperationCompleted);
            }
            this.InvokeAsync("GetWardAutoComplete", new object[0], this.GetWardAutoCompleteOperationCompleted, userState);
        }
        
        private void OnGetWardAutoCompleteOperationCompleted(object arg) {
            if ((this.GetWardAutoCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWardAutoCompleteCompleted(this, new GetWardAutoCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTestsAutoComplete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetTestsAutoComplete() {
            object[] results = this.Invoke("GetTestsAutoComplete", new object[0]);
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetTestsAutoCompleteAsync() {
            this.GetTestsAutoCompleteAsync(null);
        }
        
        /// <remarks/>
        public void GetTestsAutoCompleteAsync(object userState) {
            if ((this.GetTestsAutoCompleteOperationCompleted == null)) {
                this.GetTestsAutoCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestsAutoCompleteOperationCompleted);
            }
            this.InvokeAsync("GetTestsAutoComplete", new object[0], this.GetTestsAutoCompleteOperationCompleted, userState);
        }
        
        private void OnGetTestsAutoCompleteOperationCompleted(object arg) {
            if ((this.GetTestsAutoCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestsAutoCompleteCompleted(this, new GetTestsAutoCompleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddLabRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client AddLabRecord(LAB b) {
            object[] results = this.Invoke("AddLabRecord", new object[] {
                        b});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void AddLabRecordAsync(LAB b) {
            this.AddLabRecordAsync(b, null);
        }
        
        /// <remarks/>
        public void AddLabRecordAsync(LAB b, object userState) {
            if ((this.AddLabRecordOperationCompleted == null)) {
                this.AddLabRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLabRecordOperationCompleted);
            }
            this.InvokeAsync("AddLabRecord", new object[] {
                        b}, this.AddLabRecordOperationCompleted, userState);
        }
        
        private void OnAddLabRecordOperationCompleted(object arg) {
            if ((this.AddLabRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLabRecordCompleted(this, new AddLabRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateLabRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client UpdateLabRecord(LAB b) {
            object[] results = this.Invoke("UpdateLabRecord", new object[] {
                        b});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateLabRecordAsync(LAB b) {
            this.UpdateLabRecordAsync(b, null);
        }
        
        /// <remarks/>
        public void UpdateLabRecordAsync(LAB b, object userState) {
            if ((this.UpdateLabRecordOperationCompleted == null)) {
                this.UpdateLabRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateLabRecordOperationCompleted);
            }
            this.InvokeAsync("UpdateLabRecord", new object[] {
                        b}, this.UpdateLabRecordOperationCompleted, userState);
        }
        
        private void OnUpdateLabRecordOperationCompleted(object arg) {
            if ((this.UpdateLabRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateLabRecordCompleted(this, new UpdateLabRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteLabRecord", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client DeleteLabRecord(LAB b) {
            object[] results = this.Invoke("DeleteLabRecord", new object[] {
                        b});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteLabRecordAsync(LAB b) {
            this.DeleteLabRecordAsync(b, null);
        }
        
        /// <remarks/>
        public void DeleteLabRecordAsync(LAB b, object userState) {
            if ((this.DeleteLabRecordOperationCompleted == null)) {
                this.DeleteLabRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteLabRecordOperationCompleted);
            }
            this.InvokeAsync("DeleteLabRecord", new object[] {
                        b}, this.DeleteLabRecordOperationCompleted, userState);
        }
        
        private void OnDeleteLabRecordOperationCompleted(object arg) {
            if ((this.DeleteLabRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteLabRecordCompleted(this, new DeleteLabRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Server2Client {
        
        private int countField;
        
        private double valueField;
        
        private string messageField;
        
        private bool resultField;
        
        private System.Data.DataTable dtField;
        
        private System.Data.DataSet dsField;
        
        /// <remarks/>
        public int count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public double value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt {
            get {
                return this.dtField;
            }
            set {
                this.dtField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet ds {
            get {
                return this.dsField;
            }
            set {
                this.dsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class LAB {
        
        private int idField;
        
        private System.DateTime i_DateField;
        
        private int slNoField;
        
        private int dailyNoField;
        
        private string receiptNoField;
        
        private string eMRNoField;
        
        private string patientTypeField;
        
        private string wardField;
        
        private string mRDNoField;
        
        private string testPerformedField;
        
        private double chargeField;
        
        private string remarksField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime I_Date {
            get {
                return this.i_DateField;
            }
            set {
                this.i_DateField = value;
            }
        }
        
        /// <remarks/>
        public int SlNo {
            get {
                return this.slNoField;
            }
            set {
                this.slNoField = value;
            }
        }
        
        /// <remarks/>
        public int DailyNo {
            get {
                return this.dailyNoField;
            }
            set {
                this.dailyNoField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiptNo {
            get {
                return this.receiptNoField;
            }
            set {
                this.receiptNoField = value;
            }
        }
        
        /// <remarks/>
        public string EMRNo {
            get {
                return this.eMRNoField;
            }
            set {
                this.eMRNoField = value;
            }
        }
        
        /// <remarks/>
        public string PatientType {
            get {
                return this.patientTypeField;
            }
            set {
                this.patientTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Ward {
            get {
                return this.wardField;
            }
            set {
                this.wardField = value;
            }
        }
        
        /// <remarks/>
        public string MRDNo {
            get {
                return this.mRDNoField;
            }
            set {
                this.mRDNoField = value;
            }
        }
        
        /// <remarks/>
        public string TestPerformed {
            get {
                return this.testPerformedField;
            }
            set {
                this.testPerformedField = value;
            }
        }
        
        /// <remarks/>
        public double Charge {
            get {
                return this.chargeField;
            }
            set {
                this.chargeField = value;
            }
        }
        
        /// <remarks/>
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLabRecordCompletedEventHandler(object sender, GetLabRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLabRecordByIDCompletedEventHandler(object sender, GetLabRecordByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabRecordByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabRecordByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public LAB Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((LAB)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLabRecordByDateCompletedEventHandler(object sender, GetLabRecordByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabRecordByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabRecordByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLabRecordByDatesCompletedEventHandler(object sender, GetLabRecordByDatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabRecordByDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabRecordByDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetLabRecordByEMRCompletedEventHandler(object sender, GetLabRecordByEMRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLabRecordByEMRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLabRecordByEMRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetYearlySerialNoCompletedEventHandler(object sender, GetYearlySerialNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetYearlySerialNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetYearlySerialNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetDailySerialNoCompletedEventHandler(object sender, GetDailySerialNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDailySerialNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDailySerialNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetWardAutoCompleteCompletedEventHandler(object sender, GetWardAutoCompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWardAutoCompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWardAutoCompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetTestsAutoCompleteCompletedEventHandler(object sender, GetTestsAutoCompleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTestsAutoCompleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTestsAutoCompleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddLabRecordCompletedEventHandler(object sender, AddLabRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLabRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLabRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateLabRecordCompletedEventHandler(object sender, UpdateLabRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateLabRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateLabRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteLabRecordCompletedEventHandler(object sender, DeleteLabRecordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteLabRecordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteLabRecordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591