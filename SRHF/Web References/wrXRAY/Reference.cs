//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace SRHF.wrXRAY {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="wsXRAYSoap", Namespace="http://tempuri.org/")]
    public partial class wsXRAY : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetXrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXRAYByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXrayByEMROperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXRAYByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXRAYByDatesOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddXrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateXrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteXrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDailyNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMonthlyNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetYearlyNoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public wsXRAY() {
            this.Url = global::SRHF.Properties.Settings.Default.SRHF_wrXRAY_wsXRAY;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetXrayCompletedEventHandler GetXrayCompleted;
        
        /// <remarks/>
        public event GetXRAYByIDCompletedEventHandler GetXRAYByIDCompleted;
        
        /// <remarks/>
        public event GetXrayByEMRCompletedEventHandler GetXrayByEMRCompleted;
        
        /// <remarks/>
        public event GetXRAYByDateCompletedEventHandler GetXRAYByDateCompleted;
        
        /// <remarks/>
        public event GetXRAYByDatesCompletedEventHandler GetXRAYByDatesCompleted;
        
        /// <remarks/>
        public event AddXrayCompletedEventHandler AddXrayCompleted;
        
        /// <remarks/>
        public event UpdateXrayCompletedEventHandler UpdateXrayCompleted;
        
        /// <remarks/>
        public event DeleteXrayCompletedEventHandler DeleteXrayCompleted;
        
        /// <remarks/>
        public event GetDailyNoCompletedEventHandler GetDailyNoCompleted;
        
        /// <remarks/>
        public event GetMonthlyNoCompletedEventHandler GetMonthlyNoCompleted;
        
        /// <remarks/>
        public event GetYearlyNoCompletedEventHandler GetYearlyNoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetXray() {
            object[] results = this.Invoke("GetXray", new object[0]);
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetXrayAsync() {
            this.GetXrayAsync(null);
        }
        
        /// <remarks/>
        public void GetXrayAsync(object userState) {
            if ((this.GetXrayOperationCompleted == null)) {
                this.GetXrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXrayOperationCompleted);
            }
            this.InvokeAsync("GetXray", new object[0], this.GetXrayOperationCompleted, userState);
        }
        
        private void OnGetXrayOperationCompleted(object arg) {
            if ((this.GetXrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXrayCompleted(this, new GetXrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXRAYByID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public XRAY GetXRAYByID(int ID) {
            object[] results = this.Invoke("GetXRAYByID", new object[] {
                        ID});
            return ((XRAY)(results[0]));
        }
        
        /// <remarks/>
        public void GetXRAYByIDAsync(int ID) {
            this.GetXRAYByIDAsync(ID, null);
        }
        
        /// <remarks/>
        public void GetXRAYByIDAsync(int ID, object userState) {
            if ((this.GetXRAYByIDOperationCompleted == null)) {
                this.GetXRAYByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXRAYByIDOperationCompleted);
            }
            this.InvokeAsync("GetXRAYByID", new object[] {
                        ID}, this.GetXRAYByIDOperationCompleted, userState);
        }
        
        private void OnGetXRAYByIDOperationCompleted(object arg) {
            if ((this.GetXRAYByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXRAYByIDCompleted(this, new GetXRAYByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXrayByEMR", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetXrayByEMR(string EMRNo) {
            object[] results = this.Invoke("GetXrayByEMR", new object[] {
                        EMRNo});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetXrayByEMRAsync(string EMRNo) {
            this.GetXrayByEMRAsync(EMRNo, null);
        }
        
        /// <remarks/>
        public void GetXrayByEMRAsync(string EMRNo, object userState) {
            if ((this.GetXrayByEMROperationCompleted == null)) {
                this.GetXrayByEMROperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXrayByEMROperationCompleted);
            }
            this.InvokeAsync("GetXrayByEMR", new object[] {
                        EMRNo}, this.GetXrayByEMROperationCompleted, userState);
        }
        
        private void OnGetXrayByEMROperationCompleted(object arg) {
            if ((this.GetXrayByEMRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXrayByEMRCompleted(this, new GetXrayByEMRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXRAYByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetXRAYByDate(System.DateTime dt) {
            object[] results = this.Invoke("GetXRAYByDate", new object[] {
                        dt});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetXRAYByDateAsync(System.DateTime dt) {
            this.GetXRAYByDateAsync(dt, null);
        }
        
        /// <remarks/>
        public void GetXRAYByDateAsync(System.DateTime dt, object userState) {
            if ((this.GetXRAYByDateOperationCompleted == null)) {
                this.GetXRAYByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXRAYByDateOperationCompleted);
            }
            this.InvokeAsync("GetXRAYByDate", new object[] {
                        dt}, this.GetXRAYByDateOperationCompleted, userState);
        }
        
        private void OnGetXRAYByDateOperationCompleted(object arg) {
            if ((this.GetXRAYByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXRAYByDateCompleted(this, new GetXRAYByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXRAYByDates", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetXRAYByDates(System.DateTime df, System.DateTime dt) {
            object[] results = this.Invoke("GetXRAYByDates", new object[] {
                        df,
                        dt});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetXRAYByDatesAsync(System.DateTime df, System.DateTime dt) {
            this.GetXRAYByDatesAsync(df, dt, null);
        }
        
        /// <remarks/>
        public void GetXRAYByDatesAsync(System.DateTime df, System.DateTime dt, object userState) {
            if ((this.GetXRAYByDatesOperationCompleted == null)) {
                this.GetXRAYByDatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXRAYByDatesOperationCompleted);
            }
            this.InvokeAsync("GetXRAYByDates", new object[] {
                        df,
                        dt}, this.GetXRAYByDatesOperationCompleted, userState);
        }
        
        private void OnGetXRAYByDatesOperationCompleted(object arg) {
            if ((this.GetXRAYByDatesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXRAYByDatesCompleted(this, new GetXRAYByDatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddXray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client AddXray(XRAY xray) {
            object[] results = this.Invoke("AddXray", new object[] {
                        xray});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void AddXrayAsync(XRAY xray) {
            this.AddXrayAsync(xray, null);
        }
        
        /// <remarks/>
        public void AddXrayAsync(XRAY xray, object userState) {
            if ((this.AddXrayOperationCompleted == null)) {
                this.AddXrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddXrayOperationCompleted);
            }
            this.InvokeAsync("AddXray", new object[] {
                        xray}, this.AddXrayOperationCompleted, userState);
        }
        
        private void OnAddXrayOperationCompleted(object arg) {
            if ((this.AddXrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddXrayCompleted(this, new AddXrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateXray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client UpdateXray(XRAY xray) {
            object[] results = this.Invoke("UpdateXray", new object[] {
                        xray});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateXrayAsync(XRAY xray) {
            this.UpdateXrayAsync(xray, null);
        }
        
        /// <remarks/>
        public void UpdateXrayAsync(XRAY xray, object userState) {
            if ((this.UpdateXrayOperationCompleted == null)) {
                this.UpdateXrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateXrayOperationCompleted);
            }
            this.InvokeAsync("UpdateXray", new object[] {
                        xray}, this.UpdateXrayOperationCompleted, userState);
        }
        
        private void OnUpdateXrayOperationCompleted(object arg) {
            if ((this.UpdateXrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateXrayCompleted(this, new UpdateXrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteXray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client DeleteXray(XRAY xray) {
            object[] results = this.Invoke("DeleteXray", new object[] {
                        xray});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteXrayAsync(XRAY xray) {
            this.DeleteXrayAsync(xray, null);
        }
        
        /// <remarks/>
        public void DeleteXrayAsync(XRAY xray, object userState) {
            if ((this.DeleteXrayOperationCompleted == null)) {
                this.DeleteXrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteXrayOperationCompleted);
            }
            this.InvokeAsync("DeleteXray", new object[] {
                        xray}, this.DeleteXrayOperationCompleted, userState);
        }
        
        private void OnDeleteXrayOperationCompleted(object arg) {
            if ((this.DeleteXrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteXrayCompleted(this, new DeleteXrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDailyNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetDailyNo(System.DateTime dt) {
            object[] results = this.Invoke("GetDailyNo", new object[] {
                        dt});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetDailyNoAsync(System.DateTime dt) {
            this.GetDailyNoAsync(dt, null);
        }
        
        /// <remarks/>
        public void GetDailyNoAsync(System.DateTime dt, object userState) {
            if ((this.GetDailyNoOperationCompleted == null)) {
                this.GetDailyNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDailyNoOperationCompleted);
            }
            this.InvokeAsync("GetDailyNo", new object[] {
                        dt}, this.GetDailyNoOperationCompleted, userState);
        }
        
        private void OnGetDailyNoOperationCompleted(object arg) {
            if ((this.GetDailyNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDailyNoCompleted(this, new GetDailyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMonthlyNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetMonthlyNo(System.DateTime dt) {
            object[] results = this.Invoke("GetMonthlyNo", new object[] {
                        dt});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetMonthlyNoAsync(System.DateTime dt) {
            this.GetMonthlyNoAsync(dt, null);
        }
        
        /// <remarks/>
        public void GetMonthlyNoAsync(System.DateTime dt, object userState) {
            if ((this.GetMonthlyNoOperationCompleted == null)) {
                this.GetMonthlyNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMonthlyNoOperationCompleted);
            }
            this.InvokeAsync("GetMonthlyNo", new object[] {
                        dt}, this.GetMonthlyNoOperationCompleted, userState);
        }
        
        private void OnGetMonthlyNoOperationCompleted(object arg) {
            if ((this.GetMonthlyNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMonthlyNoCompleted(this, new GetMonthlyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetYearlyNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Server2Client GetYearlyNo(System.DateTime dt) {
            object[] results = this.Invoke("GetYearlyNo", new object[] {
                        dt});
            return ((Server2Client)(results[0]));
        }
        
        /// <remarks/>
        public void GetYearlyNoAsync(System.DateTime dt) {
            this.GetYearlyNoAsync(dt, null);
        }
        
        /// <remarks/>
        public void GetYearlyNoAsync(System.DateTime dt, object userState) {
            if ((this.GetYearlyNoOperationCompleted == null)) {
                this.GetYearlyNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetYearlyNoOperationCompleted);
            }
            this.InvokeAsync("GetYearlyNo", new object[] {
                        dt}, this.GetYearlyNoOperationCompleted, userState);
        }
        
        private void OnGetYearlyNoOperationCompleted(object arg) {
            if ((this.GetYearlyNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetYearlyNoCompleted(this, new GetYearlyNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Server2Client {
        
        private int countField;
        
        private double valueField;
        
        private string messageField;
        
        private bool resultField;
        
        private System.Data.DataTable dtField;
        
        private System.Data.DataSet dsField;
        
        /// <remarks/>
        public int count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        public double value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public string message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt {
            get {
                return this.dtField;
            }
            set {
                this.dtField = value;
            }
        }
        
        /// <remarks/>
        public System.Data.DataSet ds {
            get {
                return this.dsField;
            }
            set {
                this.dsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class XRAY {
        
        private int idField;
        
        private System.DateTime i_DateField;
        
        private int dailyNoField;
        
        private int monthlyNoField;
        
        private string eMRNoField;
        
        private string diagnosisField;
        
        private string receiptNoField;
        
        private string remarksField;
        
        private double chargeField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime I_Date {
            get {
                return this.i_DateField;
            }
            set {
                this.i_DateField = value;
            }
        }
        
        /// <remarks/>
        public int DailyNo {
            get {
                return this.dailyNoField;
            }
            set {
                this.dailyNoField = value;
            }
        }
        
        /// <remarks/>
        public int MonthlyNo {
            get {
                return this.monthlyNoField;
            }
            set {
                this.monthlyNoField = value;
            }
        }
        
        /// <remarks/>
        public string EMRNo {
            get {
                return this.eMRNoField;
            }
            set {
                this.eMRNoField = value;
            }
        }
        
        /// <remarks/>
        public string Diagnosis {
            get {
                return this.diagnosisField;
            }
            set {
                this.diagnosisField = value;
            }
        }
        
        /// <remarks/>
        public string ReceiptNo {
            get {
                return this.receiptNoField;
            }
            set {
                this.receiptNoField = value;
            }
        }
        
        /// <remarks/>
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
        
        /// <remarks/>
        public double Charge {
            get {
                return this.chargeField;
            }
            set {
                this.chargeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetXrayCompletedEventHandler(object sender, GetXrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetXRAYByIDCompletedEventHandler(object sender, GetXRAYByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXRAYByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXRAYByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public XRAY Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((XRAY)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetXrayByEMRCompletedEventHandler(object sender, GetXrayByEMRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXrayByEMRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXrayByEMRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetXRAYByDateCompletedEventHandler(object sender, GetXRAYByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXRAYByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXRAYByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetXRAYByDatesCompletedEventHandler(object sender, GetXRAYByDatesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXRAYByDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXRAYByDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void AddXrayCompletedEventHandler(object sender, AddXrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddXrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddXrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void UpdateXrayCompletedEventHandler(object sender, UpdateXrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateXrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateXrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void DeleteXrayCompletedEventHandler(object sender, DeleteXrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteXrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteXrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetDailyNoCompletedEventHandler(object sender, GetDailyNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDailyNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDailyNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetMonthlyNoCompletedEventHandler(object sender, GetMonthlyNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMonthlyNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMonthlyNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void GetYearlyNoCompletedEventHandler(object sender, GetYearlyNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetYearlyNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetYearlyNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Server2Client Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Server2Client)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591